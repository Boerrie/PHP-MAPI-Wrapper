<?xml version="1.0" encoding="UTF-8" ?>
<root>
<example>
<name>
	Instantiation
</name>
<description>
	<![CDATA[This example shows how to instantiate, or start, the Echove PHP class. The first token, which is for the Read API, is required. The second token is for the Write API and is optional.]]>
</description>
<code>
<![CDATA[&lt;?php
	
	# Include the Echove SDK
	require('echove.php');
	
	# Instantiate the class, passing it our Brightcove API tokens
	$bc = new Echove(
		'z9Jp-c3-KhWc4fqNf1JWz6SkLDlbO0m8UAwOjDBUSt0.',
		'z9Jp-c3-KhUSoOh0IV8SA6ghleZlti6W9mmC_IhdCnybDfHqhmloA..'
	);
		
?&gt;]]>
</code>
</example>
<example>
<name>
	Properties
</name>
<description>
	<![CDATA[This example shows how to set and retrieve some of the Echove properties that can be used for debugging and additional settings.]]>
</description>
<code>
<![CDATA[&lt;?php
	
	# Turn on HTTPS mode
	$e->__set('secure', TRUE);
	
	# Make our API call
	$videos = $e->find('allVideos');
	
	# Determine how many possible results there are
	echo 'Total Videos: ' . $e->total_count . '&lt;br /&gt;';

	# Make our API call
	$videos = $e->findAll();
	
	# Determine how many times we called the Brightcove API
	echo 'API Calls: ' . $e->__get('api_calls');
		
?&gt;]]>
</code>
</example>
<example>
<name>
	Error Handling
</name>
<description>
	<![CDATA[This example shows how to utilize the built-in error handling in Echove.]]>
</description>
<code>
<![CDATA[&lt;?php
	
	# Create a try/catch
	try {
		# Make our API call
		$video = $e->find('find_video_by_id', 8604819001);
	} catch(Exception $error) {
		# Handle our error
		echo $error;
		die();
	}
		
?&gt;]]>
</code>
</example>
<example>
<name>
	Find Query
</name>
<description>
	<![CDATA[This example shows how to retrieve a video from a Brightcove account.]]>
</description>
<code>
<![CDATA[&lt;?php
	
	# Make our API call
	$video = $e->find('find_video_by_id', 8604819001);

	# Print the video name and ID
	echo $video->name . ' (' . $video->id . ')';
		
?&gt;]]>
</code>
</example>
<example>
<name>
	Find Query - Shorthand
</name>
<description>
	<![CDATA[This example shows how you can use shorthand method names to make code easier to write and read.]]>
</description>
<code>
<![CDATA[&lt;?php
	
	# Make our API call
	$video = $e->find('videoById', 8604819001);

?&gt;]]>
</code>
</example>
<example>
<name>
	Find Query - Additional Parameters
</name>
<description>
	<![CDATA[This example shows how to define additional API call parameters using a key-value array.]]>
</description>
<code>
<![CDATA[&lt;?php
	
	# Define our parameters
	$params = array(
		'id' => 8604819001,
		'video_fields' => 'video_id,name,shortDescription'
	);
	
	# Make our API call
	$video = $e->find('videoById', $params);
		
?&gt;]]>
</code>
</example>
<example>
<name>
	Find Query - True Find All
</name>
<description>
	<![CDATA[Brightcove limits the "find_all_videos" call to 100 results, requiring pagination and numerous API calls. This example shows how to use the findAll() method to do this automatically. <br /><strong>WARNING: Use very carefully</strong>]]>
</description>
<code>
<![CDATA[&lt;?php
	
	# Define our parameters
	$params = array(
		'video_fields' => 'id,name'
	);
	
	# Make our API call
	$videos = $e->findAll('video', $params);
		
?&gt;]]>
</code>
</example>
<example>
<name>
	Search Query
</name>
<description>
	<![CDATA[This example shows how to search for a video about "jobs", but not "Steve Jobs".]]>
</description>
<code>
<![CDATA[&lt;?php
	
	# Define our parameters
	$params = array(
		'video_fields' => 'id,name,shortDescription'
	);
	
	# Set our search terms
	$terms = array(
		'all' => 'display_name:jobs',
		'none' => 'display_name:steve'
	);
	
	# Make our API call
	$videos = $e->search('video', $terms, $params);
		
?&gt;]]>
</code>
</example>
<example>
<name>
	Search Query (Multiple-Field Search)
</name>
<description>
	<![CDATA[This example shows how to search for a video with "jobs" in the title AND tags.]]>
</description>
<code>
<![CDATA[&lt;?php
	
	# Define our parameters
	$params = array(
		'video_fields' => 'id,name,shortDescription'
	);
	
	# Set our search terms
	$terms = array(
		'all' => 'display_name:jobs,tag:jobs'
	);
	
	# Make our API call
	$videos = $e->search('video', $terms, $params);
		
?&gt;]]>
</code>
</example>
<example>
<name>
	Create - Video
</name>
<description>
	<![CDATA[This example details how to upload a video to a Brightcove account. This code is handling data that was passed from a form. Note that we re-name the uploaded movie to its original name rather than the random string generated when it's placed in the "tmp" directory; this is because the tmp_name does not include the file extension. The video name is a required field.]]>
</description>
<code>
<![CDATA[&lt;?php
			
	# Create an array of meta data from our form fields
	$metaData = array(
		'name' => $_POST['videoName'],
		'shortDescription' => $_POST['videoShortDescription']
	);

	# Move the file out of 'tmp', or rename
	rename($_FILES['videoFile']['tmp_name'], '/tmp/' . $_FILES['videoFile']['name']);
	$file = '/tmp/' . $_FILES['videoFile']['name'];
	
	# Upload the video and save the video ID
	$id = $e->createMedia('video', $file, $metaData);

?&gt;]]>
</code>
</example>
<example>
<name>
	Create - Image
</name>
<description>
	<![CDATA[This example details how to upload a image to a Brightcove account. This code is handling data that was passed from a form. Note that we re-name the uploaded image to its original name rather than the random string generated when it's placed in the "tmp" directory; this is because the tmp_name does not include the file extension.]]>
</description>
<code>
<![CDATA[&lt;?php
			
	# Create an array of meta data from our form fields
	$metaData = array(
		'type' => 'VIDEO_STILL',
		'displayName' => $_POST['imageName']
	);

	# Move the file out of 'tmp', or rename
	rename($_FILES['bcImage']['tmp_name'], '/tmp/' . $_FILES['bcImage']['name']);
	$file = '/tmp/' . $_FILES['bcImage']['name'];
	
	# Upload the image, assign to a video, and save the image asset ID
	$id = $e->createImage('video', $file, $metaData, 8604819001);

?&gt;]]>
</code>
</example>
<example>
<name>
	Create - Playlist
</name>
<description>
	<![CDATA[This example shows how to create a playlist in a Brightcove account. The code is handling data that was passed from a form. The name, video IDs, and playlist type are all required fields.]]>
</description>
<code>
<![CDATA[&lt;?php
			
	# Take a comma-separated string of video IDs and explode into an array
	$videoIds = explode(',', $_POST['playlistVideoIds']);
	
	# Create an array of meta data from our form fields
	$metaData = array(
		'name' => $_POST['playlistName'],
		'shortDescription' => $_POST['playlistShortDescription'],
		'videoIds' => $videoIds,
		'playlistType' => 'explicit'
	);
	
	# Create the playlist and save the playlist ID
	$id = $e->createPlaylist('video', $metaData);

?&gt;]]>
</code>
</example>
<example>
<name>
	Update - Video / Playlist
</name>
<description>
	<![CDATA[This example shows how to update a video, but the same method will work for a playlist.]]>
</description>
<code>
<![CDATA[&lt;?php
			
	# Create an array of the new meta data
	$metaData = array(
		'id' => 8604819001,
		'shortDescription' => 'Our new short description.'
	);
	
	# Update a video with the new meta data
	$e->update('video', $metaData);

?&gt;]]>
</code>
</example>
<example>
<name>
	Delete - Video / Playlist
</name>
<description>
	<![CDATA[This example shows how to delete a video, but the same method will work for a playlist. Cascaded deletion means that the video will also be removed from all playlists and players.]]>
</description>
<code>
<![CDATA[&lt;?php
			
	# Delete a 'video' by ID, and cascade the deletion
	$e->delete('video', 8604819001, NULL, TRUE);

?&gt;]]>
</code>
</example>
<example>
<name>
	Status - Video Upload
</name>
<description>
	<![CDATA[This example shows how to determine the status of a video being uploaded to a Brightcove account.]]>
</description>
<code>
<![CDATA[&lt;?php
	
	# Retrieve upload status		
	$status = $e->getStatus('video', 8604819001);

?&gt;]]>
</code>
</example>
<example>
<name>
	Share Video
</name>
<description>
	<![CDATA[This example shows how to share a video with another Brightcove account. A list of the new video IDs will be returned. Note that sharing must be enabled between the two accounts.]]>
</description>
<code>
<![CDATA[&lt;?php
	
	# List the accounts to share the video with
	$ids = array(
		123456789
	);
	
	# Share the videos, and save the new video IDs
	$new_ids = $e->shareMedia('video', 8604819001, $ids);

?&gt;]]>
</code>
</example>
<example>
<name>
	Add To / Remove From Playlist
</name>
<description>
	<![CDATA[This example shows how to add an asset to a playlist, as well as how to remove an asset from a playlist. You may pass an array of video IDs, or a single video ID.]]>
</description>
<code>
<![CDATA[&lt;?php
			
	# Add two videos to a playlist
	$e->addToPlaylist(44969780001, array(45061414001, 45062831001));
	
	# Remove a video from a playlist
	$e->removeFromPlaylist(44969780001, 45062831001);

?&gt;]]>
</code>
</example>
<example>
<name>
	SEF URLs / Time Formatting
</name>
<description>
	<![CDATA[This example shows the Echove convenience methods that convert video titles into a search-engine friendly format and video lengths into formatted strings.]]>
</description>
<code>
<![CDATA[&lt;?php
	
	# Make our API call
	$video = $e->find('videoById', 8604819001);
	
	# Print the SEF video name and formatted duration
	echo 'Name: ' . $e->sef($video->name) . '&lt;br /&gt;';
	echo 'Duration:' . $e->time($video->length) . '&lt;br /&gt;';
		
?&gt;]]>
</code>
</example>
<example>
<name>
	Automatic Timestamp Conversion
</name>
<description>
	<![CDATA[To more seamlessly bridge the Brightcove API into PHP the 'from_date' parameter for the "find_modified_videos" call should be provided as seconds since Epoch (UNIX timestamp) instead of minutes since, as the Brightcove Media API documentation states. You can still pass minutes if you prefer.]]>
</description>
<code>
<![CDATA[&lt;?php
	
	# Set timestamp to 7 days ago (in seconds)
	$time = time() - 604800;
	
	# Make our API call
	$videos = $e->find('modifiedVideos', $time);
	
	# Set timestamp to 7 days ago (in minutes)
	$time = floor((time() - 604800) / 60);
	
	# Make our API call
	$videos = $e->find('modifiedVideos', $time);
		
?&gt;]]>
</code>
</example>
<example>
<name>
	Tags
</name>
<description>
	<![CDATA[This example demonstrates how a tag with a value of "abc=xyz" can easily be parsed into a key-value array pair.]]>
</description>
<code>
<![CDATA[&lt;?php
	
	# Make our API call
	$video = $e->find('videoById', 8604819001);
	
	# Parse any key=value tags into array
	$video->tags = $e->tags($video->tags);
	
	# Print out each tag
	foreach($video->tags as $key => $value)
	{
		echo $key . ': ' . $value . '&lt;br /&gt;';
	}
		
?&gt;]]>
</code>
</example>
<example>
<name>
	Tag Filter
</name>
<description>
	<![CDATA[This example shows how to remove all videos that don't contain any of the listed tags.]]>
</description>
<code>
<![CDATA[&lt;?php
	
	# Make our API call
	$videos = $e->find('allVideos');
	
	# Remove all videos without specified tags
	$videos = $e->filter($videos, 'published=true,include=true');
		
?&gt;]]>
</code>
</example>
</root>